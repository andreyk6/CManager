//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CertifyMe.Client.EventServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DmBaseDataContract", Namespace="http://schemas.datacontract.org/2004/07/CertifyMe.Service.DataContracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CertifyMe.Client.EventServiceReference.EventComment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CertifyMe.Client.EventServiceReference.Event))]
    public partial class DmBaseDataContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationTime {
            get {
                return this.CreationTimeField;
            }
            set {
                if ((this.CreationTimeField.Equals(value) != true)) {
                    this.CreationTimeField = value;
                    this.RaisePropertyChanged("CreationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventComment", Namespace="http://schemas.datacontract.org/2004/07/CertifyMe.Service.DataContracts")]
    [System.SerializableAttribute()]
    public partial class EventComment : CertifyMe.Client.EventServiceReference.DmBaseDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CommentatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CommentatorId {
            get {
                return this.CommentatorIdField;
            }
            set {
                if ((this.CommentatorIdField.Equals(value) != true)) {
                    this.CommentatorIdField = value;
                    this.RaisePropertyChanged("CommentatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/CertifyMe.Service.DataContracts")]
    [System.SerializableAttribute()]
    public partial class Event : CertifyMe.Client.EventServiceReference.DmBaseDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventServiceReference.IEventService")]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/GetById", ReplyAction="http://tempuri.org/IServiceOf_Event/GetByIdResponse")]
        CertifyMe.Client.EventServiceReference.Event GetById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/GetById", ReplyAction="http://tempuri.org/IServiceOf_Event/GetByIdResponse")]
        System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.Event> GetByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/Add", ReplyAction="http://tempuri.org/IServiceOf_Event/AddResponse")]
        System.Guid Add(CertifyMe.Client.EventServiceReference.Event item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/Add", ReplyAction="http://tempuri.org/IServiceOf_Event/AddResponse")]
        System.Threading.Tasks.Task<System.Guid> AddAsync(CertifyMe.Client.EventServiceReference.Event item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/RemoveById", ReplyAction="http://tempuri.org/IServiceOf_Event/RemoveByIdResponse")]
        bool RemoveById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/RemoveById", ReplyAction="http://tempuri.org/IServiceOf_Event/RemoveByIdResponse")]
        System.Threading.Tasks.Task<bool> RemoveByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/Update", ReplyAction="http://tempuri.org/IServiceOf_Event/UpdateResponse")]
        bool Update(CertifyMe.Client.EventServiceReference.Event item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/Update", ReplyAction="http://tempuri.org/IServiceOf_Event/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(CertifyMe.Client.EventServiceReference.Event item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/GetAll", ReplyAction="http://tempuri.org/IServiceOf_Event/GetAllResponse")]
        CertifyMe.Client.EventServiceReference.Event[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_Event/GetAll", ReplyAction="http://tempuri.org/IServiceOf_Event/GetAllResponse")]
        System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.Event[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/RegisterUser", ReplyAction="http://tempuri.org/IEventService/RegisterUserResponse")]
        bool RegisterUser(System.Guid userId, System.Guid eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/RegisterUser", ReplyAction="http://tempuri.org/IEventService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(System.Guid userId, System.Guid eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UnregisterUser", ReplyAction="http://tempuri.org/IEventService/UnregisterUserResponse")]
        bool UnregisterUser(System.Guid userId, System.Guid eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UnregisterUser", ReplyAction="http://tempuri.org/IEventService/UnregisterUserResponse")]
        System.Threading.Tasks.Task<bool> UnregisterUserAsync(System.Guid userId, System.Guid eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetComments", ReplyAction="http://tempuri.org/IEventService/GetCommentsResponse")]
        CertifyMe.Client.EventServiceReference.EventComment[] GetComments(System.Guid eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetComments", ReplyAction="http://tempuri.org/IEventService/GetCommentsResponse")]
        System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.EventComment[]> GetCommentsAsync(System.Guid eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetUserEvents", ReplyAction="http://tempuri.org/IEventService/GetUserEventsResponse")]
        CertifyMe.Client.EventServiceReference.Event[] GetUserEvents(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetUserEvents", ReplyAction="http://tempuri.org/IEventService/GetUserEventsResponse")]
        System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.Event[]> GetUserEventsAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetCompanyEvents", ReplyAction="http://tempuri.org/IEventService/GetCompanyEventsResponse")]
        CertifyMe.Client.EventServiceReference.Event[] GetCompanyEvents(System.Guid companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetCompanyEvents", ReplyAction="http://tempuri.org/IEventService/GetCompanyEventsResponse")]
        System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.Event[]> GetCompanyEventsAsync(System.Guid companyId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : CertifyMe.Client.EventServiceReference.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.ClientBase<CertifyMe.Client.EventServiceReference.IEventService>, CertifyMe.Client.EventServiceReference.IEventService {
        
        public EventServiceClient() {
        }
        
        public EventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CertifyMe.Client.EventServiceReference.Event GetById(System.Guid id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.Event> GetByIdAsync(System.Guid id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public System.Guid Add(CertifyMe.Client.EventServiceReference.Event item) {
            return base.Channel.Add(item);
        }
        
        public System.Threading.Tasks.Task<System.Guid> AddAsync(CertifyMe.Client.EventServiceReference.Event item) {
            return base.Channel.AddAsync(item);
        }
        
        public bool RemoveById(System.Guid id) {
            return base.Channel.RemoveById(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveByIdAsync(System.Guid id) {
            return base.Channel.RemoveByIdAsync(id);
        }
        
        public bool Update(CertifyMe.Client.EventServiceReference.Event item) {
            return base.Channel.Update(item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(CertifyMe.Client.EventServiceReference.Event item) {
            return base.Channel.UpdateAsync(item);
        }
        
        public CertifyMe.Client.EventServiceReference.Event[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.Event[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public bool RegisterUser(System.Guid userId, System.Guid eventId) {
            return base.Channel.RegisterUser(userId, eventId);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(System.Guid userId, System.Guid eventId) {
            return base.Channel.RegisterUserAsync(userId, eventId);
        }
        
        public bool UnregisterUser(System.Guid userId, System.Guid eventId) {
            return base.Channel.UnregisterUser(userId, eventId);
        }
        
        public System.Threading.Tasks.Task<bool> UnregisterUserAsync(System.Guid userId, System.Guid eventId) {
            return base.Channel.UnregisterUserAsync(userId, eventId);
        }
        
        public CertifyMe.Client.EventServiceReference.EventComment[] GetComments(System.Guid eventId) {
            return base.Channel.GetComments(eventId);
        }
        
        public System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.EventComment[]> GetCommentsAsync(System.Guid eventId) {
            return base.Channel.GetCommentsAsync(eventId);
        }
        
        public CertifyMe.Client.EventServiceReference.Event[] GetUserEvents(System.Guid userId) {
            return base.Channel.GetUserEvents(userId);
        }
        
        public System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.Event[]> GetUserEventsAsync(System.Guid userId) {
            return base.Channel.GetUserEventsAsync(userId);
        }
        
        public CertifyMe.Client.EventServiceReference.Event[] GetCompanyEvents(System.Guid companyId) {
            return base.Channel.GetCompanyEvents(companyId);
        }
        
        public System.Threading.Tasks.Task<CertifyMe.Client.EventServiceReference.Event[]> GetCompanyEventsAsync(System.Guid companyId) {
            return base.Channel.GetCompanyEventsAsync(companyId);
        }
    }
}
